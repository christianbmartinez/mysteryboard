<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MysteryBoard - An anonymous app for posting your thoughts</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl" crossorigin="anonymous"></head>
    <link rel="stylesheet" href="css/style.css">
</head>
<body>
    <nav>
        <div class="container-fluid nav-header">
          <a class="logo" href="/">mysteryboard</a>
        </div>
    </nav>
    <div class="container">
        <% if (mysteryBoards.length > 0) { %> 
        <% mysteryBoards.forEach(mysteryboard => { %>
            <div class="post">
                <div class="row">
                    <div class="col-sm">
                        <figure class="text-center">
                            <blockquote class="blockquote">
                                <div id="content-<%= mysteryboard._id %>">
                                    <%= mysteryboard.content %>                                
                                </div>
                            </blockquote>
                            <figcaption class="mysteryboard-footer">
                                <%= dayjs(mysteryboard.date).fromNow() %> by <%= mysteryboard.name %>
                            </figcaption>
                        </figure>
                    </div>
                </div>
                <div class="hearts">
                    <i class="material-icons" id="<%= mysteryboard._id %>" onclick="handleHeart('<%= mysteryboard._id %>')">favorite_border</i>
                    <span id="heart-<%= mysteryboard._id %>" class="heart-count"><%= mysteryboard.hearts %></span>                       
                </div>
            </div>
            <div class="container-fluid action">
                <ul class="nav justify-content-center">
                    <li class="nav-item">
                        <div type="button" data-bs-toggle="modal" data-bs-target="#new-post" class="action-btn">
                            <i class="material-icons">edit</i>   
                        </div>
                    </li>
                    <li class="nav-item">
                        <div id="refresh" type="button" class="action-btn">
                            <i class="material-icons">cached</i>   
                        </div>
                    </li>
                    <li class="nav-item">
                    <div id="btt-btn" type="button" class="action-btn" onclick="backToTop()">
                        <i class="material-icons">arrow_circle_up</i>   
                    </div>
                    </li>
                </ul>   
            </div>
        <%  }) %>
        <%  } else { %>
            <div class="no-results">
                <img class="hero-img" src="notfound.svg" alt="Not Found | MysteryBoard | An anonymous app for posting your thoughts">
                <div class="row">
                    <div class="col-sm">
                        <h4 class="no-results--heading">
                            No mysteryboards found
                        </h4>
                        <p class="no-results--text">
                            Click the icon below to create your first post!
                            <div class="button-container">
                            <div type="button" data-bs-toggle="modal" data-bs-target="#new-post" class="action-btn--no-results">
                                <i class="material-icons">edit</i>
                            </div>   
                            </div>  
                        </p>
                    </div>
                </div>   
            </div>
        <%  } %>
    </div> 
    <div class="modal fade" id="new-post" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">New Post</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="form" method="POST" action="/">
                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <input type="text" minlength="3" maxlength="20" class="form-control" id="user" name="name" placeholder="Captain Thunderpants">
                        </div>
                        <div class="mb-3">
                            <label for="content" class="form-label">Content*</label>
                            <textarea required minlength="5" maxlength="1000" class="form-control" id="content" name="content" placeholder="Have you ever wondered if we are the aliens?" rows="3"></textarea>
                        </div>
                        <input id="date" name="date" type="hidden">                
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button id="submit" type="submit" class="btn btn-primary">Submit</button>
                        </div>
                    </form>
                </div>            
            </div>
        </div>
    </div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js" integrity="sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0" crossorigin="anonymous"></script>
<script>
    const refresh = document.getElementById('refresh')
    const form = document.getElementById('form')  
    const user = document.getElementById('user')
    const content = document.getElementById('content')
    const submit = document.getElementById('submit')
    const date = document.getElementById('date')
    const newPost = document.getElementById('new-post')
    let mysteryPosts = document.querySelectorAll('.blockquote')
    let longPosts = [] // Empty array we will push and store long posts into
    let truncateLength = 250 // Truncate mysteryboard posts over this length

    // Read More

    mysteryPosts.forEach(post => { // Loop through all posts
        // If the data is longer than our truncate limit, handle it
        if (post.childNodes[1].attributes[0].ownerElement.innerHTML.length >= truncateLength) {
        // Push the long posts and id's into our empty array to store them 
        longPosts.push([post.childNodes[1].attributes[0].value, post.childNodes[1].attributes[0].ownerElement.innerHTML])
        // Insert truncated data into the dom for all long posts
        // Dynamically generate a read more button and push the ids as arguments
        document.getElementById(post.childNodes[1].attributes[0].value).innerHTML = 
        `${post.childNodes[1].attributes[0].ownerElement.innerHTML.substring(0, truncateLength)}
        <span class="read-more" onclick="readMore('${post.childNodes[1].attributes[0].value}')"> ...more</span>`
        // Handle the read more button      
        readMore = (contentId) => {
            // Retreive data in the long posts array and loop it
            longPosts.forEach(entry => {
                // If the id from long posts matches the id of arguments, display the full length content
                // Dynamically generate a read less button
                if (entry[0] === contentId) {
                    document.getElementById(contentId).innerHTML = 
                    `${entry[0,1]}
                    <span class="read-more" onclick="readLess('${contentId}')"> ...less</span>`                
                }
            })
        }
        // Handle the read less button
        readLess = (contentId) => {
            // We basically do the same function again, in reverse
            longPosts.forEach(entry => {
                if (entry[0] === contentId) {
                    // This time, we will return the content back to its truncated state
                    // And re render the read more button
                    document.getElementById(contentId).innerHTML = 
                    `${entry[0,1].substring(0, truncateLength)}
                    <span class="read-more" onclick="readMore('${contentId}')"> ...more</span>`                
                }
            })
        }
        }
    })  
    // Back to top

    const bttButton = document.getElementById('btt-btn') 
    // When a scroll occurs, call our scroll function
    window.onscroll = () => scrollPos()

    scrollPos = () => { 
        // If user is past 20px from the top, display our back to top button
        // Otherwise, hide it
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            bttButton.style.display = 'block'
        } else {
            bttButton.style.display = 'none'
        }
    }
    // On click, send the user to the absolute top of the page
    backToTop = () => { 
        document.body.scrollTop = 0 
        document.documentElement.scrollTop = 0
    }
    
    // Handle heart/unheart
    
    // Pass in the id as an argument to keep track of each unique post
    handleHeart = (postId) => {
        // Grab the heart count data
        document.getElementById(`heart-${postId}`).innerHTML = 
        // Convert the string into a number and increment value by 1
        Number(document.getElementById(`heart-${postId}`).innerHTML) + 1
        // On the server, a put request to mysteryboards/:id/heart 
        // endpoint increases heart count by 1 and saves to our database.  
        fetch(`mysteryboards/${postId}/heart`, {
            method: 'PUT',
            'Content-Type': 'application/json'
        })
        // Heart icon styling, switch icon on click
        let heart = document.getElementById(postId)
        heart.classList.add('fade-out') 
        heart.innerHTML = 'favorite'
        setTimeout(() => {heart.classList.remove('fade-out')}, 300)
        // If the user changes their mind and wishes to unheart, handle it
        heart.onclick = () => {
            document.getElementById(`heart-${postId}`).innerHTML = 
            // Decrement the value by 1 on the client
            Number(document.getElementById(`heart-${postId}`).innerHTML) - 1
            // On the server, a put request to mysteryboards/:id/unheart 
            // endpoint decreases heart count by 1 and saves to our database. 
            fetch(`mysteryboards/${postId}/unheart`, {
                method: 'PUT',
                'Content-Type': 'application/json'
            })
            // Heart icon styling, switch icon on click
            heart.classList.add('fade-out')
            heart.innerHTML = 'favorite_border'
            setTimeout(() => {heart.classList.remove('fade-out')}, 300)
            // On a third heart click, we can loop our handleHeart function
            heart.onclick = () => {
                handleHeart(postId)
            }
        }
    }

    // Refresh Button

    refresh.onclick = () => {
        window.location.reload()
    }

    // New Post Modal

    newPost.addEventListener('show.bs.modal', (event) => {
      const button = event.relatedTarget
    })

    // New Post Form

    form.onsubmit = e => { 
        // Basic Form Validation
        if (!form.checkValidity()) {
        e.preventDefault()
        e.stopPropagation()
        }  
        // Define a default user name, timestamp
        user.value ? user.value : user.value = 'Anonymous'
        date.value = Date.now()
        form.classList.add('was-validated')
    }, false   
    
</script> 
</body>
</html>